.equ LEDS,      0xFF200000
.equ SWITCHES,  0xFF200040

.text
.global _start

_start:
    li sp, 0x03FFFFFC         # Khởi tạo stack pointer

main_loop:
    la t0, SWITCHES           # Đọc giá trị từ công tắc
    lw t1, 0(t0)
    andi a0, t1, 0xFF         # Lấy 8 bit thấp để kiểm tra

    jal ra, is_prime          # Gọi hàm kiểm tra số nguyên tố

    la t0, LEDS               # Xuất kết quả ra LED
    sw a0, 0(t0)

    j main_loop               # Lặp lại chương trình

# ------------------------------
# Hàm kiểm tra số nguyên tố
# Input : a0 - số nguyên dương cần kiểm tra
# Output: a0 = 0xFF nếu là số nguyên tố, ngược lại = 0
# ------------------------------
is_prime:
    addi sp, sp, -12
    sw s0, 0(sp)
    sw s1, 4(sp)
    sw ra, 8(sp)

    li t0, 2
    blt a0, t0, not_prime     # < 2 → không phải số nguyên tố
    beq a0, t0, is_prime_end  # == 2 → là số nguyên tố

    andi t0, a0, 1
    beq t0, zero, not_prime   # chẵn thì loại trừ

    srli t1, a0, 1            # t1 = a0 / 2
    mv s0, a0                 # s0 = số cần kiểm tra
    li s1, 3                  # bắt đầu từ 3

prime_loop:
    bgt s1, t1, is_prime_end  # nếu vượt quá sqrt(n) → là nguyên tố

    mv t2, s0                 # t2 = s0 để kiểm tra chia hết

divide_loop:
    blt t2, s1, next_check    # nếu t2 < s1 → không chia hết
    beq t2, s1, not_prime     # nếu t2 == s1 → chia hết → không nguyên tố
    sub t2, t2, s1            # t2 -= s1
    j divide_loop

next_check:
    addi s1, s1, 2            # tăng lên số lẻ tiếp theo
    j prime_loop

# Trả về kết quả: là nguyên tố
is_prime_end:
    li a0, 0xFF
    j done

# Trả về kết quả: không phải nguyên tố
not_prime:
    li a0, 0

done:
    lw s0, 0(sp)
    lw s1, 4(sp)
    lw ra, 8(sp)
    addi sp, sp, 12
    ret
