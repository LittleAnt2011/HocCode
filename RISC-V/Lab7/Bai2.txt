.text
.global _start
_start:
    li sp, 0x03FFFFFC            # Khởi tạo Stack Pointer ở đỉnh vùng nhớ

    la t0, fib_n                 # t0 ← địa chỉ biến đầu vào n
    lw a0, 0(t0)                 # a0 ← giá trị n

    jal ra, fib                  # Gọi hàm fib(n)

    la t1, result                # t1 ← địa chỉ kết quả
    sw a0, 0(t1)                 # Ghi kết quả vào Fib_Result

STOP:   j STOP                   # Dừng chương trình (vòng lặp vô hạn)

# ========== Hàm fib(a0) ==========
fib:
    addi sp, sp, -16             # Cấp phát stack cho ra, s0, s1, s2
    sw ra, 12(sp)                # Lưu return address
    sw s0, 8(sp)                 # Lưu s0
    sw s1, 4(sp)                 # Lưu s1
    sw s2, 0(sp)                 # Lưu s2 (chưa dùng nhưng dự phòng)

    # Trường hợp cơ sở
    li t0, 0
    beq a0, t0, base_case_0      # nếu n == 0, trả về 0
    li t0, 1
    beq a0, t0, base_case_1      # nếu n == 1, trả về 1

    mv s0, a0                    # s0 ← n

    # Gọi fib(n-1)
    addi a0, s0, -1
    jal ra, fib
    mv s1, a0                    # s1 ← fib(n-1)

    # Gọi fib(n-2)
    addi a0, s0, -2
    jal ra, fib
    add a0, a0, s1               # a0 ← fib(n-1) + fib(n-2)

    j fib_exit

base_case_0:
    li a0, 0
    j fib_exit

base_case_1:
    li a0, 1

fib_exit:
    lw s2, 0(sp)
    lw s1, 4(sp)
    lw s0, 8(sp)
    lw ra, 12(sp)
    addi sp, sp, 16              # Khôi phục stack
    ret

.data
fib_n:   .word 8             # Giá trị đầu vào n = 8
result:  .word 0             # Lưu kết quả Fibonacci(n)