.data
A: .word 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
N: .word 10
count: .word 0

.text
.global _start
_start:
    li sp, 0x03FFFFFC
    la s0, A           # s0 = base address of A
    la s1, N
    lw s1, 0(s1)       # s1 = N
    li s2, 0           # s2 = count
    li s3, 0           # s3 = i

LOOP:
    bge s3, s1, END
    slli t0, s3, 2
    add t0, s0, t0
    lw a0, 0(t0)

    jal ra, isPrime
    beqz a0, NEXT
    addi s2, s2, 1

NEXT:
    addi s3, s3, 1
    j LOOP

END:
    la t0, count
    sw s2, 0(t0)

STOP: j STOP

# ===============================
# isPrime(a0) â†’ a0 = 1 if prime, 0 if not
# ===============================
isPrime:
    addi sp, sp, -12
    sw ra, 8(sp)
    sw s0, 4(sp)
    sw s1, 0(sp)

    li t0, 2
    blt a0, t0, NotPrime
    beq a0, t0, Prime

    andi t0, a0, 1
    beqz t0, NotPrime

    mv s0, a0
    li s1, 3

LoopCheck:
    # t0 = s1 * s1
    mul_like:
        li t0, 0
        li t3, 0
    sq_loop:
        add t0, t0, s1
        addi t3, t3, 1
        bne t3, s1, sq_loop

    bgt t0, s0, Prime

    # Check s0 % s1 == 0
    mv t4, s0
div_check:
    blt t4, s1, NextDiv
    beq t4, s1, NotPrime
    sub t4, t4, s1
    j div_check

NextDiv:
    addi s1, s1, 2
    j LoopCheck

Prime:
    li a0, 1
    j Done

NotPrime:
    li a0, 0

Done:
    lw s1, 0(sp)
    lw s0, 4(sp)
    lw ra, 8(sp)
    addi sp, sp, 12
    ret
