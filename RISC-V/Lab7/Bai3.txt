############################################################
#  Kiểm tra số chính phương & điều khiển LED đỏ (8-bit)
#  Thuật toán tuyến tính – KHÔNG MUL/DIV/REM              #
############################################################

.equ LED_ADDR,      0xFF200000   # LED Red
.equ SWITCH_ADDR,   0xFF200040   # SW[7:0]

    .text
    .globl _start

# ======================== MAIN LOOP ========================
_start:
main_loop:
    # --- Đọc 1 byte từ SW[7:0] ---
    li   t0, SWITCH_ADDR       # địa chỉ switch
    lbu  t1, 0(t0)             # N (0-255)

    mv   a0, t1
    jal  ra, isPerfectSquare   # a0 = 1 / 0

    # --- Điều khiển LED ---
    li   t3, LED_ADDR
    beq  a0, x0, led_off

led_on:
    li   t4, 0xFF              # Bật 8 LED
    sw   t4, 0(t3)
    j    delay_loop

led_off:
    li   t4, 0x00              # Tắt LED
    sw   t4, 0(t3)

# ----- delay nhỏ để tránh nhấp nháy -----
delay_loop:
    li   t5, 100000            # tuỳ board, tăng/giảm nếu cần
delay_dec:
    addi t5, t5, -1
    bnez t5, delay_dec

    j    main_loop             # lặp & đọc lại SW
# ===================== END MAIN LOOP ======================


############################################################
#  isPerfectSquare(a0 = N)  →  a0 = 1 (true) / 0 (false)
############################################################
isPerfectSquare:
    li   t6, 2
    blt  a0, t6, pfs_true      # 0 hoặc 1

    li   t1, 1                 # i = 1
pfs_loop:
    li   t2, 0                 # t2 = i*i
    mv   t3, t1                # bộ đếm = i
pfs_mul:
    add  t2, t2, t1
    addi t3, t3, -1
    bnez t3, pfs_mul

    beq  t2, a0, pfs_true
    bgt  t2, a0, pfs_false

    addi t1, t1, 1
    j    pfs_loop

pfs_true:
    li   a0, 1
    ret

pfs_false:
    li   a0, 0
    ret